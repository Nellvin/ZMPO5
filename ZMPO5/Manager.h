#ifndef M
#define M
#pragma once
#include <string>
#include "Problems.h"
#include <iostream>
#define BOOLPROBLEM 1
#define INTPROBLEM 2
#define DOUBLEPROBLEM 3

class CManager
{
public:
	CManager();
	~CManager();
	void setRodziajProblemu(int problem);
	void setPojemno럱Plecaka(int sizePlecak);
	void setWielko럱Populacjiu(int pop);
	void setPrawdopodobie認twoKrzy쯢wania(double probkrzyz);
	void setPrawdopodobie認twoMutacji(double probmut);
	void setCzasDzia쓰niaAlgorytmu(int sec);
	int getRodziajProblemu() { return iRodziajProblemu; }
	int  getPojemno럱Plecaka() {return iPojemno럱Plecaka;}
	int getWielko럱Populacjiu() { return iWielko럱Populacji; }
	double getPrawdopodobie認twoKrzy쯢wania() { return dPrawdopodobie認twoKrzy쯢wania; }
	double getPrawdopodobie認twoMutacji() {return dPrawdopodobie認twoMutacji;}
	int getCzasDzia쓰niaAlgorytmu() { return iCzasDzia쓰niaAlgorytmu; }
	void vAddItem(int iSize, double dValue){ przedmioty.push_back(new Item(iSize, dValue)); }
	void vPrintItems();
	double dGetValueItemIndex(int index) { return  przedmioty[index]->dGetValue(); };
	double dGetSizeItemIndex(int index) { return  przedmioty[index]->dGetSize(); };
	int iVectorSize() { return przedmioty.size(); }

private:
	int iRodziajProblemu;
	int iPojemno럱Plecaka;
	int iWielko럱Populacji;
	double dPrawdopodobie認twoKrzy쯢wania;
	double dPrawdopodobie認twoMutacji;
	int iLiczbaIteracji;
	int iCzasDzia쓰niaAlgorytmu;
	vector<Item*>przedmioty;
};
#endif M